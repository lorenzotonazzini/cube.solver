(function(){var n,s,t,a;for(t in n=this.Cube||require("./cube"),s={asyncOK:!!window.Worker,_asyncSetup:function(n){if(!this._worker)return this._worker=new window.Worker(n),this._worker.addEventListener("message",n=>this._asyncEvent(n)),this._asyncCallbacks={}},_asyncEvent:function(n){var s,t;if((t=this._asyncCallbacks[n.data.cmd])&&t.length)return s=t[0],t.splice(0,1),s(n.data)},_asyncCallback:function(n,s){var t;return(t=this._asyncCallbacks)[n]||(t[n]=[]),this._asyncCallbacks[n].push(s)},asyncInit:function(n,s){return this._asyncSetup(n),this._asyncCallback("init",function(){return s()}),this._worker.postMessage({cmd:"init"})},_asyncSolve:function(n,s){return this._asyncSetup(),this._asyncCallback("solve",function(n){return s(n.algorithm)}),this._worker.postMessage({cmd:"solve",cube:n.toJSON()})},asyncScramble:function(s){return this._asyncSetup(),this._asyncCallback("solve",function(t){return s(n.inverse(t.algorithm))}),this._worker.postMessage({cmd:"solve",cube:n.random().toJSON()})},asyncSolve:function(s){return n._asyncSolve(this,s)}})a=s[t],n[t]=a}).call(this);